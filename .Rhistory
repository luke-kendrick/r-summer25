bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::clean_book()
bookdown::render_book("index.Rmd", "bookdown::gitbook")
ghpImport::ghp_import(dir = "_book", repo = ".", clean = TRUE)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook(output_dir = "docs"))
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook(output_dir = "docs"), clean = TRUE)
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook(output_dir = "docs"), clean = TRUE)
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook(), output_dir = "docs", clean = TRUE)
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook(), output_dir = "docs", clean = TRUE)
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook(), output_dir = "docs", clean = TRUE)
round(pi)
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook(), output_dir = "docs", clean = TRUE)
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook(), output_dir = "docs", clean = TRUE)
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook(), output_dir = "docs", clean = TRUE)
setwd("C:/Users/Luke Kendrick/OneDrive - Royal Holloway University of London/RHUL/Summer R Training")
library(tidyverse)
t1 <- read_csv("sleep_t.csv")
# descriptives
descr <- t1 %>%
group_by(device) %>%
summarise(m = mean(change), sd = sd(change))
# now we will print our descriptive stats in something called a tibble
print(descr) # print to console
#t-test
t_test <- t.test(change ~ device, t1, var.equal = FALSE)
print(t_test)
data <- read_csv("sleep_t.csv")
# descriptives
descr <- data %>%
group_by(device) %>%
summarise(m = mean(change), sd = sd(change))
print(descr) # print to console
#t-test
t_test <- t.test(change ~ device, data, var.equal = FALSE)
print(t_test)
# effect size
data %>%
cohens_d(change ~ device, var.equal = FALSE)
library(rstatix)
data %>%
cohens_d(change ~ device, var.equal = FALSE)
#box plot
ggplot(data, aes(x = device, y = change, fill = change)) +
geom_boxplot() +
theme_classic()
data <- read_csv("sleep3.csv")
# descriptives
descr <- data %>%
group_by(device) %>%
summarise(m = mean(change), sd = sd(change))
data <- read_csv("sleep3.csv")
# descriptives
descr <- data %>%
group_by(device) %>%
summarise(m = mean(change), sd = sd(change))
print(descr) # print to console
#t-test
t_test <- t.test(change ~ device, data, var.equal = FALSE)
print(t_test)
data <- read_csv("sleep3.csv")
# descriptives
descr <- data %>%
group_by(device) %>%
summarise(m = mean(change), sd = sd(change))
print(descr) # print to console
#t-test
t_test <- t.test(change ~ device, data, var.equal = FALSE)
print(t_test)
data <- read_csv("sleep3.csv")
# descriptives
descr <- data %>%
group_by(device) %>%
summarise(m = mean(change), sd = sd(change))
print(descr) # print to console
#t-test
t_test <- t.test(change ~ device, data, var.equal = FALSE)
print(t_test)
#box plot
ggplot(data, aes(x = device, y = change, fill = change)) +
geom_boxplot() +
theme_classic()
#box plot
ggplot(data, aes(x = device, y = change)) +
geom_boxplot() +
theme_classic()
data <- read_csv("sleep3.csv")
# descriptives
descr <- data %>%
group_by(device) %>%
summarise(m = mean(change), sd = sd(change))
print(descr) # print to console
#t-test
t_test <- t.test(change ~ device, data, var.equal = FALSE)
print(t_test)
# effect size
data %>%
cohens_d(change ~ device, var.equal = FALSE)
#box plot
ggplot(data, aes(x = device, y = change)) +
geom_boxplot() +
theme_classic()
data <- read_csv("sleep3.csv")
# descriptives
descr <- data %>%
group_by(device) %>%
summarise(m = mean(change), sd = sd(change))
print(descr) # print to console
view(descr) # open in new tab
#t-test
t_test <- t.test(change ~ device, data, var.equal = FALSE)
print(t_test)
# effect size
data %>%
cohens_d(change ~ device, var.equal = FALSE)
#box plot
ggplot(data, aes(x = device, y = change)) +
geom_boxplot() +
theme_classic()
print(descr) # print to console
# repeated measures t-test
descr <- data %>%
group_by(time) %>%
summarise(m = mean(change), sd = sd(change))
print(descr) # print to console
#t-test
t_test <- t.test(change ~ time, data, var.equal = FALSE)
print(t_test)
#t-test
t_test <- t.test(change ~ time, data, paired = TRUE)
print(t_test)
# effect size
data %>%
cohens_d(change ~ time, paired = TRUE)
#box plot
ggplot(data, aes(x = device, y = time)) +
geom_boxplot() +
theme_classic()
#box plot
ggplot(data, aes(x = time, y = change)) +
geom_boxplot() +
theme_classic()
hist(data$change[data$time == "pre"])
hist(data$change[data$time == "post"])
#check normality
diff <- data$time[data$time == "post"] - data$time[data$time == "pre"]
summary(data)
#check normality
data %>%
filter(time == "post") %>%  # ensures one row per participant
ggplot(aes(x = change)) +
geom_histogram(binwidth = 0.5, fill = "steelblue", color = "black") +
labs(title = "Histogram of Sleep Change Scores",
x = "Sleep Change Score (Post - Pre)",
y = "Number of Participants") +
theme_minimal()
data %>%
filter(time == "post") %>%
ggplot(aes(x = change)) +
geom_histogram(binwidth = 0.5)
data %>%
filter(time == "post") %>%
ggplot(aes(x = change)) +
geom_histogram(binwidth = 0.5, colour = "black")
# Create an object with difference scores (post - pre)
change_scores <- data %>%
select(id, time, change) %>%
pivot_wider(names_from = time, values_from = change) %>%
mutate(change = post - pre)
# View it
head(change_scores)
hist(change_scores)
# Create an object with difference scores (post - pre)
change_scores <- data %>%
select(id, time, change) %>%
pivot_wider(names_from = time, values_from = dif) %>%
mutate(diff = post - pre)
# Create an object with difference scores (post - pre)
change_scores <- data %>%
select(id, time, change) %>%
pivot_wider(names_from = time, values_from = diff) %>%
mutate(diff = post - pre)
# Create an object with difference scores (post - pre)
change_scores <- data %>%
select(id, time, change) %>%
pivot_wider(names_from = time, values_from = change) %>%
mutate(diff = post - pre)
hist(change_scores$diff)
shapiro.test(change_scores$diff)
descr <- data %>%
group_by(device) %>%
summarise(m = mean(change), sd = sd(change))
print(descr) # print to console
view(descr) # open in new tab
#t-test
t_test <- t.test(change ~ device, data, var.equal = FALSE)
print(t_test)
# effect size
data %>%
cohens_d(change ~ device, var.equal = FALSE)
#box plot
ggplot(data, aes(x = device, y = change)) +
geom_boxplot() +
theme_classic()
hist(data$device)
hist(data$change[data$device == "pre"])
hist(data$change[data$device == "yes"])
hist(data$change[data$device == "no"])
shapiro.test(data$change[data$device == "yes"])
shapiro.test(data$change[data$device == "no"])
#t-test
t_test <- t.test(change ~ device, data, var.equal = FALSE)
print(t_test)
data <- read_csv("https://github.com/luke-kendrick/r-summer25/tree/main/downloads/height.csv")
View(data)
View(data)
data <- read_csv("https://raw.githubusercontent.com/luke-kendrick/r-summer25/main/downloads/height.csv")
setwd("C:/Users/Luke Kendrick/OneDrive - Royal Holloway University of London/RHUL/bookdown_projects/r-summer25/downloads")
# import data and packages
ws1 <- read_csv("ws1.csv")
names(ws1)
# descriptives
descr <- data %>%
group_by(device) %>%
summarise(m = mean(change), sd = sd(change))
names(ws1)
# descriptives
descr <- ws1 %>%
group_by(device) %>%
summarise(m = mean(sleep), sd = sd(sleep))
print(descr) # print to console
#t-test
t_test <- t.test(sleep ~ device, data, var.equal = FALSE)
print(t_test)
#t-test
t_test <- t.test(sleep ~ device, data, var.equal = FALSE)
#t-test
t_test <- t.test(sleep ~ device, ws1, var.equal = FALSE)
print(t_test)
#t-test
t_test <- t.test(sleep ~ device, data = ws1, var.equal = FALSE)
print(t_test)
# effect size
ws1 %>%
cohens_d(change ~ device, var.equal = FALSE)
# effect size
ws1 %>%
cohens_d(sleep ~ device, var.equal = FALSE)
#box plot
ggplot(data, aes(x = device, y = sleep)) +
geom_boxplot() +
theme_classic()
#box plot
ggplot(ws1, aes(x = device, y = sleep)) +
geom_boxplot() +
theme_classic()
#check normality
hist(ws1$change[ws1$device == "yes"])
#check normality
hist(ws1$sleep[ws1$device == "yes"])
hist(ws1$sleep[data$device == "no"])
shapiro.test(data$sleep[ws1$device == "yes"])
#check normality
hist(ws1$sleep[ws1$device == "yes"])
hist(ws1$sleep[ws1$device == "no"])
shapiro.test(ws1$sleep[ws1$device == "yes"])
shapiro.test(ws1$sleep[ws1$device == "no"])
#check normality
hist(ws1$sleep[ws1$device == "yes"])
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook(), output_dir = "docs", clean = TRUE)
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook(), output_dir = "docs", clean = TRUE)
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook(), output_dir = "docs", clean = TRUE)
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook(), output_dir = "docs", clean = TRUE)
setwd("C:/Users/Luke Kendrick/OneDrive - Royal Holloway University of London/RHUL/bookdown_projects/r-summer25")
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook(), output_dir = "docs", clean = TRUE)
mydata <- read_csv("https://raw.githubusercontent.com/luke-kendrick/r-summer25/main/downloads/redcow2.csv")
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook(), output_dir = "docs", clean = TRUE)
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook(), output_dir = "docs", clean = TRUE)
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook(), output_dir = "docs", clean = TRUE)
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook(), output_dir = "docs", clean = TRUE)
mydata <- read_csv("https://raw.githubusercontent.com/luke-kendrick/r-summer25/main/downloads/socialmedia.csv")
View(mydata)
## 2. prepare data
#have a quick check of your data file to learn about it.
head(mydata)
names(mydata)
summary(mydata)
view(mydata)
## 3. describe data
#we have a factorial design so we need to group by BOTH independent variables
#we will also ask for n() to tell us about the group sizes
desc <- mydata %>%
group_by(notification, usage) %>%
summarise(m = mean(anxiety),
sd = sd(anxiety),
n = n())
view(desc) #we can view our descriptive here. this will open a new table.
#let's also visualise our data with a box plot to see what is going on.
ggplot(mydata, aes(x = usage, y = anxiety, fill = notification)) +
geom_boxplot() +
theme_classic()
#you could create a violin plot too if you prefer!
ggplot(mydata, aes(x = usage, y = anxiety, fill = notification)) +
geom_violin(trim = FALSE, alpha = 0.1) +  # Violin plot without trimming tails
geom_boxplot(width = 0.1, color = "black", alpha = 0.5, position = position_dodge(.9)) +  # Optional: Overlay a boxplot for additional summary statistics
theme_minimal() +  # Classic theme
labs(title = "Violin Plot of Anxiety Scores by Notification and Use",  # Add a title
x = "Usage",  # X-axis label
y = "Anxiety Score")  # Y-axis label
ggplot(mydata, aes(x = usage, y = anxiety, fill = notification)) +
geom_violin(trim = FALSE, alpha = 0.1) +  # Violin plot without trimming tails
geom_boxplot(width = 0.1, color = "black", alpha = 0.5, position = position_dodge(.9))
#you could create a violin plot too if you prefer!
ggplot(mydata, aes(x = usage, y = anxiety, fill = notification)) +
geom_violin(trim = FALSE, alpha = 0.1) +  # Violin plot without trimming tails
geom_boxplot(width = 0.1, color = "black", alpha = 0.5, position = position_dodge(.9)) +  # Optional: Overlay a boxplot for additional summary statistics
theme_classic() +  # Classic theme
labs(title = "Violin Plot of Anxiety Scores by Notification and Use",  # Add a title
x = "Usage",  # X-axis label
y = "Anxiety Score")  # Y-axis label
#you could create a violin plot too if you prefer!
ggplot(mydata, aes(x = usage, y = anxiety, fill = notification)) +
geom_violin(trim = FALSE, alpha = 0.1) +  # Violin plot without trimming tails
geom_boxplot(width = 0.1, color = "black", alpha = 0.8, position = position_dodge(.9)) +  # Optional: Overlay a boxplot for additional summary statistics
theme_classic() +  # Classic theme
labs(title = "Violin Plot of Anxiety Scores by Notification and Use",  # Add a title
x = "Usage",  # X-axis label
y = "Anxiety Score")  # Y-axis label
## 4. model data
#we can run the ANOVA using aov_ez()
anova_result <- aov_ez(id = "id",
dv = "anxiety",
between = c("notification", "usage"),
type = 3,
include_aov = TRUE,
data = mydata)
library(car)
library(afex)
## 4. model data
#we can run the ANOVA using aov_ez()
anova_result <- aov_ez(id = "id",
dv = "anxiety",
between = c("notification", "usage"),
type = 3,
include_aov = TRUE,
data = mydata)
factorial_output <- summary(anova_result)
print(factorial_output)
eta_squared(anova_result, partial = TRUE) #ask for partial eta square
library(effectsize)
eta_squared(anova_result, partial = TRUE) #ask for partial eta square
#if the interaction is significant we need to break it down!
#let's plot it first
interaction.plot(mydata$usage,          # plot the x-axis
mydata$notification,   # plot the different lines
mydata$anxiety,        # state the dependent variable
fun = mean)            # ask for the mean values
#first we need to get the emmeans
#then we need to ask for cohen's d too
posthoc_factorial <- emmeans(anova_result,
pairwise ~ notification| usage,
adjust = "holm")
library(emmeans)
#you can use the same contrasts as previous weeks.
#we need emmeans to run post-hocs
em_means <- emmeans(anova_result, ~ usage)
# Pairwise comparisons (posthoc)
pairwise_contrasts <- contrast(em_means, method = "pairwise")
print(pairwise_contrasts, adjust = "holm")
print(pairwise_contrasts, adjust = "bonferroni")
print(pairwise_contrasts, adjust = "tukey")
library(rstatix)
games_howell <- mydata %>%
games_howell_test(anxiety ~ usage)
print(games_howell)
## 5. evaluate model
#testing normality, looking at normal distribution of residuals from the model.
residuals <- residuals(anova_result) #pulls residuals from the model
qqPlot(residuals) #produces a qq-plot of residuals
hist(residuals, breaks = 20, main = "Histogram of Residuals", xlab = "Residuals", col = "lightblue") #histogram of residuals
shapiro.test(residuals) #Shapiro test for residuals
# arghhhhh A VIOLATION. is this a problem?
# well, Field et al. (2009) notes that an ANOVA is robust to violations of both normality and homogeneity IF...
# ...sample sizes are equal. We can check this:
mydata %>% count(usage, notification)
library(car)
leveneTest(anxiety ~ usage*notification, mydata)
# Optional code: try out the code below to produce different types of plots.
# plot 1
ggplot(mydata, aes(x = usage, y = anxiety, fill = notification)) +
geom_boxplot(outlier.shape = NA, color = "black", width = 0.6,
alpha = 0.8, notch = FALSE) +  # Boxplot with black outline and transparency
theme_classic(base_size = 16) +  # Classic theme with increased base font size
theme(
plot.title = element_text(hjust = 0.5, size = 20, face = "bold", color = "black"),  # Centered, bold title
axis.title.x = element_text(size = 16, face = "bold", color = "black"),  # Bold and larger x-axis title
axis.title.y = element_text(size = 16, face = "bold", color = "black"),  # Bold and larger y-axis title
axis.text.x = element_text(size = 14, color = "black"),  # Larger x-axis text
axis.text.y = element_text(size = 14, color = "black"),  # Larger y-axis text
legend.title = element_text(size = 16, face = "bold", color = "black"),  # Bold legend title
legend.text = element_text(size = 14, color = "black"),  # Larger legend text
panel.grid.major = element_line(color = "grey85", linetype = "dotted"),  # Light grey dotted major grid lines
panel.grid.minor = element_blank(),  # Remove minor grid lines
panel.background = element_rect(fill = "white", color = NA),  # White background for the panel
plot.background = element_rect(fill = "white", color = NA),  # White background for the entire plot
legend.position = "right",  # Position the legend to the right
legend.key = element_rect(fill = "white", color = NA)  # White background for legend keys
) +
scale_fill_brewer(palette = "Set3") +  # Use a colorblind-friendly palette
labs(
title = "Box Plot of Anxiety Scores by Usage and Notification Type",  # Clear title
x = "Usage Type",  # X-axis label
y = "Anxiety Score",  # Y-axis label
fill = "Notification Type"  # Legend title
) +
coord_flip()  # Optional: Flip coordinates for a horizontal box plot
#plot 2
ggplot(mydata, aes(x = usage, y = anxiety, fill = notification)) +
geom_boxplot(outlier.shape = NA, color = "black", width = 0.6, alpha = 0.7) +  # Boxplot with no outliers and transparency
theme_minimal(base_size = 16) +  # Minimal theme with increased base font size
theme(
plot.title = element_text(hjust = 0.5, size = 24, face = "bold", color = "black"),  # Centered, bold title
axis.title.x = element_text(size = 18, face = "bold", color = "black"),  # Bold and larger x-axis title
axis.title.y = element_text(size = 18, face = "bold", color = "black"),  # Bold and larger y-axis title
axis.text.x = element_text(size = 14, color = "black"),  # Larger x-axis text
axis.text.y = element_text(size = 14, color = "black"),  # Larger y-axis text
legend.title = element_text(size = 16, face = "bold", color = "black"),  # Bold legend title
legend.text = element_text(size = 14, color = "black"),  # Larger legend text
panel.grid.major = element_line(color = "grey85", linetype = "dotted"),  # Light grey dotted major grid lines
panel.grid.minor = element_blank(),  # Remove minor grid lines
panel.background = element_rect(fill = "white", color = NA),  # White background for the panel
plot.background = element_rect(fill = "white", color = NA),  # White background for the entire plot
legend.position = "right",  # Position the legend to the right
legend.key = element_rect(fill = "white", color = NA)  # White background for legend keys
) +
scale_fill_manual(values = c("#0072B2", "#D55E00", "#009E73")) +  # Custom color palette for distinction and colorblind friendliness
labs(
title = "Anxiety Scores by Usage Type and Notification",  # Clear and concise title
x = "Usage Type",  # X-axis label
y = "Anxiety Score",  # Y-axis label
fill = "Notification Type"  # Legend title
) +
coord_flip()  # Optional: Flip coordinates for a horizontal box plot
# plot 3
ggplot(mydata, aes(x = usage, y = anxiety, fill = notification)) +
geom_violin(trim = FALSE, alpha = 0.2, color = "black", lwd = 0.1) +  # Smooth violin plot with transparency and black outline
geom_boxplot(width = 0.15, color = "black", alpha = 0.5, position = position_dodge(0.9)) +  # Overlay a slim boxplot for additional statistics
stat_summary(fun = mean, geom = "point", shape = 20, size = 4, color = "black", position = position_dodge(0.9)) +  # Overlay mean points
theme_minimal(base_size = 16) +  # Minimal theme with increased base font size
theme(
plot.title = element_text(hjust = 0.5, size = 24, face = "bold", color = "black"),  # Centered, bold title
axis.title.x = element_text(size = 18, face = "bold", color = "black"),  # Bold and larger x-axis title
axis.title.y = element_text(size = 18, face = "bold", color = "black"),  # Bold and larger y-axis title
axis.text.x = element_text(size = 14, color = "black"),  # Larger x-axis text
axis.text.y = element_text(size = 14, color = "black"),  # Larger y-axis text
legend.title = element_text(size = 16, face = "bold", color = "black"),  # Bold legend title
legend.text = element_text(size = 14, color = "black"),  # Larger legend text
panel.grid.major = element_line(color = "grey85", linetype = "dotted"),  # Light grey dotted major grid lines
panel.grid.minor = element_blank(),  # Remove minor grid lines
panel.background = element_rect(fill = "white", color = NA),  # White background for the panel
plot.background = element_rect(fill = "white", color = NA),  # White background for the entire plot
legend.position = "right",  # Position the legend to the right
legend.key = element_rect(fill = "white", color = NA)  # White background for legend keys
) +
scale_fill_manual(values = c("#0072B2", "#D55E00", "#009E73")) +  # Custom color palette for distinction and colorblind friendliness
labs(
title = "Anxiety Scores by Usage Type and Notification",  # Clear and concise title
x = "Usage Type",  # X-axis label
y = "Anxiety Score",  # Y-axis label
fill = "Notification Type"  # Legend title
)
bookdown::render_book("index.Rmd", output_format = bookdown::gitbook(), output_dir = "docs", clean = TRUE)
